trigger:
- develop

pool:
  name: 'Default'

variables:
- group: application-var-group
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: system.debug
  value: true
- name: dockerPublicRepo
  value: 'dmfpython/dotnet-mvc-app-repo'

stages:
- stage: BuildAppStage
  displayName: 'Build application stage'
  jobs:
  - job: BuildAppJob
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        workingDirectory: $(Build.SourcesDirectory)
      displayName: '[ dotnetTask ] Run dotnet restore'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: 'src/DevOpsChallenge.SalesApi/DevOpsChallenge.SalesApi.csproj'
        workingDirectory: $(Build.SourcesDirectory)/
        arguments: '--configuration $(buildConfiguration) --verbosity minimal' 
      displayName: '[ dotnetTask ] Build application'
      env:
        CONNECTIONSTRINGS__DATABASE: $(CONNECTIONSTRINGS__DATABASE)

#   - job: UpdateDBJob
#     steps:
#     - checkout: none
#     - task: DotNetCoreCLI@2
#       inputs:
#         command: custom
#         custom: dotnet-ef
#         arguments: 'database update --no-build'
# #         projects: 'src/DevOpsChallenge.SalesApi.Database/DevOpsChallenge.SalesApi.Database.csproj'
#         workingDirectory: $(Build.SourcesDirectory)/src/DevOpsChallenge.SalesApi.Database
#       displayName: '[ dotnetTask ] Database Update'
#       env:
#         CONNECTIONSTRINGS__DATABASE: $(CONNECTIONSTRINGS__DATABASE)
#         DOTNET_ROOT: $(DOTNET_ROOT)

        
- stage: TestAppStage
  displayName: 'Test application stage'
  jobs:
  - job: TestAppJob
    steps:
    - checkout: none
    - task: DotNetCoreCLI@2
      inputs:
        command: test
        projects: '$(Build.SourcesDirectory)/tests/DevOpsChallenge.SalesApi.Business.UnitTests/DevOpsChallenge.SalesApi.Business.UnitTests.csproj'
        arguments: '--verbosity minimal'
      displayName: '[ dotnetTask ] Run unit tests on application'

    - task: Bash@3
      inputs:
        workingDirectory: $(Build.SourcesDirectory)
        targetType: filePath
        filePath: $(Build.SourcesDirectory)/temp-scripts/
      displayName: '[ bashTask ] Run Integration tests on application - WIP'

- stage: DockerizeStage
  displayName: 'Containerize App'
  jobs:
  - job: DockerJob
    steps:
    - checkout: none
    - task: Docker@2
      inputs:
        containerRegistry: 'dockerHubConnection'
        command: 'login'
      displayName: '[ dockerTask ] docker login'

    - task: Docker@2
      inputs:
        containerRegistry: 'dockerHubConnection'
        repository: $(dockerPublicRepo)
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
      displayName: '[ dockerTask ] docker build'

        
    - task: Docker@2
      inputs:
        containerRegistry: 'dockerHubConnection'
        repository: $(dockerPublicRepo)
        command: 'push'
      displayName: '[ dockerTask ] docker push'

    - task: Docker@2
      inputs:
        containerRegistry: 'dockerHubConnection'
        command: 'logout'
      displayName: '[ dockerTask ] docker logout'
